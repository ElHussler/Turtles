---DESIGN---
Functional/Technical aspects, Implementation details of:
1) Opponent detection			- Green hat recognition, Searching, Last-known location
						 (TODO: GMapping?)
2) Obstacle avoidance			- 	 (TODO: Debug Lasercan)
3) Player behaviour (attack/escape)	- Attack (TODO: LaserScan to stop from hitting prey)
4) "Choice of relevant parameters"	-	 (TODO: Note Linear/Angular Speeds, search rotation amounts?)
5) Additional functionality		- 	 (TODO: Add functions from 'Extra' section below; rudimentary 'Prey'?)

---IMPLEMENTATION---
1) Well-commented and structured code	-	 (TODO: Add adequate comments)

---TESTING---
1) Functionality (efficient implementation)
2) Performance (time/distance accuracy)
3) Limitations
4) Possible improvements
5) Influence of system parameters (Speed, CPU speeds, controller values)

---REPORT---
2500 words covering:
1) Technical Design
	a) Implementation details and relevant parameters for:
		i) Opponent detection (Spatial awareness; reasoning whether to: search vs. pursue, search in last known
		   direction of prey, search on spot first then traverse map, use bumper if to catch prey if visible)
		ii) Obstacle avoidance (Spatial awareness; reasoning whether to: pursue vs. avoid, combine avoidance
		    tactics to prevent endless loops & getting stuck, check previous avoidance attempts)
		iii) Player behaviour (Predator 'Search & Destroy')
2) Testing & Evaluation
	a) Functionality (efficient implementation)
	b) Performance (time/distance accuracy)
	c) Limitations
	d) Possible improvements
	e) Influence of system parameters (Speed, CPU speeds, controller values)
+) References (Textbooks, Websites)

---ADVANCED FUNCTIONALITY---
1) 'Prey' Behaviour
2) Behaviour coordination
	-Finite State Machine
3) Advanced object detection
	-Colour-based learning
	-Extra visual cues
	-Multi-object handling
	-Localisation
4) Spatial awareness
	-Analysis of hiding places

---DEMONSTRATION---
1) Structured
2) Well-prepared
3) Highlight features

---TO-DO---
1) Add WIN condition (Full Hat (pixel count) in view, low laserscan vals)
2) Debug LaserScans to prevent loops and contradictory messages
	- Obstacle Avoidance
	- Prevent Predator from hitting prey
3) Add simple Prey mode
4) Add simple GMapping
?) Add bumper topic to give robust conditions for prey catching?
?) Limit search rotations to 2 for efficiency
	- Next step is implementing Mapping and traversing blind spots
